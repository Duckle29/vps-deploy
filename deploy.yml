---
- name: Bootstrap python 3 and such
  hosts: vps
  become: true
  tags:
    - bootstrap
    - python 

  roles:
      - mrlesmithjr.ansible_bootstrap_python

  post_tasks:
    - name: Ensure a locale exists
      locale_gen:
        name: en_US.UTF-8
        state: present

- name: Ensure sudo user mikkel is present
  hosts: vps
  become: true

  vars_files:
    - vars/credentials.yml

  tasks:
    - name: Set become group (Ubuntu)
      set_fact: become_group="sudo"
      when: ansible_os_family | lower == "debian"

    - name: Set become group (Redhat)
      set_fact: become_group="wheel"
      when: ansible_os_family | lower == "redhat"

    - name: Ensure user is present and part of sudoers
      user:
        name: mikkel
        shell: /bin/bash
        groups: '{{ become_group }}'
        append: yes
        password: '{{ user_mikkel_pass }}'
        generate_ssh_key: yes
        ssh_key_bits: 4096

- name: Harden SSH
  hosts: vps
  become: true
  tags:
    - ssh

  vars:
    sshd_log_level: 'INFO'

    
  pre_tasks:
    - name: Set authorized ssh keys
      authorized_key:
        user: mikkel
        state: present
        key: https://github.com/Duckle29.keys

  roles:
    - dev-sec.ssh-hardening

- name: Install acme.sh, aquire certs, and generate dhparams
  hosts: vps
  become: true
  tags:
    - ssl

  vars_files:
    - vars/credentials.yml
    - vars/shared_vars.yml

  vars:
    acme_sh_copy_certs_to_path: '{{ cert_dir }}'
    acme_sh_become_user: "root"

    acme_sh_default_staging: false
    acme_sh_default_force_issue: false
    acme_sh_default_dns_provider: "dns_cf"
    acme_sh_default_dns_sleep: 120
    acme_sh_default_extra_flags_issue: '-k 4096'
    acme_sh_default_install_cert_reloadcmd: "sudo systemctl reload nginx"

    acme_sh_domains:
      - domains: ["mikkel.cc", "*.mikkel.cc"]
        debug: False 
    
    dhparams_remote_directory: '{{ cert_dir }}'
    dhparams_key_size: 4096

  roles:
    - { role: "nickjj.acme_sh", tags: ["acme_sh"] }
    - duckle29.dhparam

- name: Ensure the required python-docker bindings are installed
  hosts: vps
  become: true
  tags:
    - docker
    - python
  
  tasks:
    - name: Install docker api and docker-compose api
      pip:
        name:
          - docker
          - docker-compose

- name: Install the latest version of Docker-CE
  hosts: vps
  become: true
  tags:
    - docker
  
  vars:
    docker_edition: 'ce'
    docker_package_state: latest

    docker_service_state: started
    docker_service_enabled: true

    docker_install_compose: true
    
    docker_users:
      - mikkel
  
  roles:
    - geerlingguy.docker

- name: Install nginx
  hosts: vps
  become: true
  tags:
    - nginx

  vars_files:
    - vars/port_usage.yml
    - vars/shared_vars.yml
    - vars/nextcloud/main.yml

  pre_tasks:
    - name: Remove apache
      apt: 
        name: apache2
        state: absent

  roles:
    - nginxinc.nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

  post_tasks:    
    - name: Make snippet directory
      file:
        dest: /etc/nginx/snippets
        state: directory
      notify:
        - reload nginx

    - name: Copy ssl snippet
      template:
        src: templates/nginx/ssl_snippets.j2
        dest: /etc/nginx/snippets/ssl
      notify:
        - reload nginx
    
    - name: Remove default nginx site
      file:
        dest: /etc/nginx/conf.d/default.conf
        state: absent
      notify:
        - reload nginx

    # Deploys all .conf.j2 files in templates/nginx/sites
    - name: Deploy site configs
      template:
        src: '{{ item }}'
        dest: '/etc/nginx/conf.d/{{ (item | basename | splitext)[0] }}'
      with_fileglob:
        - templates/nginx/sites/*.conf.j2
      notify:
        - reload nginx

- name: Deploy resume website
  hosts: vps
  become: true
  tags:
    - resume_site
  
  vars_files:
    - vars/shared_vars.yml
    - vars/credentials.yml

  tasks:
    - name: Clone site via git
      git:
        repo: 'https://github.com/Duckle29/startbootstrap-resume.git'
        dest: '{{ mikkelcc_webroot }}'

    - name: Install webhook server
      include_role: 
        name: webhook_server
    
    - name: Change ownership of resume site files
      file:
        group: gunicorn
        owner: gunicorn
        recurse: true
        path: '{{ mikkelcc_webroot }}'
        state: directory

- name: Install thelounge
  hosts: vps
  become: true
  tags:
    - thelounge
  
  tasks:
    - name: Install nodejs
      include_role:
        name: geerlingguy.nodejs
      vars:
        nodejs_version: "14.x"
        nodejs_install_npm_user: root

    - name: Get the latest release info
      uri:
        method: GET
        url: https://api.github.com/repos/thelounge/thelounge/releases/latest
        return_content: true
      register: lounge_json_response
    
    - name: Latest version is
      debug:
        msg: "{{ lounge_json_response.json.assets.0.browser_download_url | regex_replace('^.*thelounge_((\\d\\.*)+)_all\\.deb', '\\1') }}"
      failed_when: lounge_json_response.json.assets.0.browser_download_url is not regex("thelounge_((\d\.*)+)_all\.deb")

    - name: Get the latest thelounge .deb
      get_url: 
        url: '{{ lounge_json_response.json.assets.0.browser_download_url }}'
        dest: /root/
      register: lounge_deb_file
    
    - name: Install thelounge
      apt:
        deb: '{{ lounge_deb_file.dest }}'

    - name: Remove .deb file
      file:
        state: absent
        path: '{{ lounge_deb_file.dest }}'

    - name: Stop thelounge before changing config
      service:
        name: thelounge
        state: stopped

    - name: Set up config
      template:
        src: templates/thelounge-config.js.j2
        dest: /etc/thelounge/config.js

    - name: Start and enable thelounge
      service:
        enabled: yes
        name: thelounge
        state: started

- name: Install unifi SDN
  hosts: vps
  become: true
  tags:
    - unifi

  tasks:
    - name: Add an apt key for unifi
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: 06E85760C0A52C50 

    - name: Add unifi repository
      apt_repository:
        repo: deb http://www.ubnt.com/downloads/unifi/debian stable ubiquiti
        state: present
        filename: 100-ubnt-unifi

    - name: Install unifi SDN
      apt:
        name: '{{ item }}'
        state: present
      loop:
        - openjdk-8-jre-headless
        - unifi

- name: Install UNMS
  hosts: vps
  become: true
  tags:
    - unms

  tasks:
    - name: Install dependencies
      apt:
        name: ['curl', 'netcat', 'sudo', 'bash']
        state: present

    - name: Check that UNMS isn't already installed
      stat:
        path: /home/unms/app/unms-cli
      register: unms_stat
  
    - name: Install UNMS
      shell: "curl -fsSL https://unms.com/install > /tmp/unms_inst.sh && sudo bash /tmp/unms_inst.sh --public-https-port 443 --http-port 8081 --https-port 9443 --unattended"
      when: not unms_stat.stat.exists

- name: Install sopel
  hosts: vps
  become: true
  tags:
    - sopel

  vars_files:
    - vars/credentials.yml

  vars:
    sopel_command_prefix: '\$'
    
    sopel_instance_name: dumDuck
    sopel_nick: DumDuckBot
    sopel_auth_user: '{{ sopel_irc_user }}'
    sopel_auth_pass: '{{ sopel_irc_pass }}'
    sopel_install_dir: '/srv/sopel'

    sopel_channels: 
      - '##botspam'
      - '#reprap'
      - '#bigdelta'
      - '#partkeepr'

    sopel_bot_owner: 'Duckle29'

    sopel_enabled_plugins:
      - help
      - admin
      - clock
      - find_updates
      - reload
      - currency
      - remind
      - search
      - version
      - xkcd
      - wolfram
      - calc
      - funreplies

    sopel_ignored_nicks:
      - kthx
      - mcrib
      - ghtx
      - PartKeepr
    
    sopel_config_extra: |
      [wolfram]
      app_id = {{ wolfram_alpha_key }}
      max_public = 3
      units = metric

      [currency]
      fixer_io_key = {{ fixer_io_key }}
      auto_convert = true
  
  handlers:
    - name: restart sopel
      become: true
      service:
        name: 'sopel-{{ sopel_instance_name }}'
        state: restarted
  
  roles:
    - sopel.sopel
  
  post_tasks:
    - name: Install wolfram plugin
      pip:
        name: sopel-modules.wolfram
        state: present
        virtualenv: '{{ sopel_install_dir }}/venv_{{ sopel_instance_name }}'
        virtualenv_command: '/usr/bin/python3 -m venv'
      notify: restart sopel

- name: Set up autotorrent
  hosts: vps
  become: true
  tags:
    - autotorrent
    - deluge

  vars_files:
    - vars/credentials.yml
    - vars/shared_vars.yml

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

  tasks:
    - name: Add deluge ppa
      apt_repository:
        repo: ppa:deluge-team/stable

    - name: Install deluged
      apt:
        name:
          - deluged
          - deluge-console
        state: present
    
    - name: Add deluge system user
      user:
        name: deluge
        password: '!'
        home: /srv/deluge
        system: yes
        state: present
    
    - name: Add deluged systemd service
      template:
        src: templates/deluge/unitfile.service.j2
        dest: /etc/systemd/system/deluged.service
      when: ansible_service_mgr == 'systemd'
      notify:
        - reload systemd

    - name: Add deluge admin user
      lineinfile:
        line: '{{ deluge_user }}:{{ deluge_pass }}:10'
        path: /srv/deluge/.config/deluge/auth
        create: true

    - name: Ensure file ownership
      file:
        path: /srv/deluge
        recurse: yes
        owner: deluge
        group: deluge

    - name: Start and enable deluged
      service:
        name: deluged
        state: started
        enabled: yes
    
    - name: Allow remote connections
      shell: 'deluge-console "config -s allow_remote True"'

    - pause:
        seconds: 5
        prompt: "Wait for deluged to start"

    - name: Allow remote connections
      shell: deluge-console "config -s allow_remote True"
      become_user: deluge
      register: ret
      failed_when: "'successfully updated' not in ret.stdout"

    - name: Install feedgen
      pip:
        name: feedgen
        executable: pip3
    
    - name: Install pytz
      pip:
        name: pytz
        executable: pip3

    - name: Create web root
      file:
        path: '{{ autotorrent_webroot }}'
        state: directory
        owner: deluge
        group: deluge
    
    - name: Install git
      apt:
        name: git
        state: present

    - name: Get torrentGen
      git:
        repo: https://github.com/Duckle29/torrentGen.git
        dest: /srv/deluge/torrentGen
        update: no
    
    - name: Ensure autoadd folder is present
      file:
        path: '/srv/deluge/torrentGen/autoadd'
        state: directory
        owner: deluge
        group: deluge

    - name: Set correct webroot in torrent gen script
      lineinfile:
        line: "webroot          = '{{ autotorrent_webroot }}/octopi/'"
        regexp: '^webroot +=.+$'
        path: /srv/deluge/torrentGen/octopi/check.py

    - name: Set up cronjob
      cron:
        name: 'autotorrent: Check for new version'
        user: 'deluge'
        minute: '0'
        hour: '*/1'
        job: /usr/bin/python3 /srv/deluge/torrentGen/octopi/check.py

- name: Install Nextcloud (docker-apache)
  hosts: vps
  become: True
  tags:
    - nextcloud
  
  vars_files:
    - vars/shared_vars.yml
    - vars/port_usage.yml
    - vars/credentials.yml

  tasks:
    - name: Create nextcloud network
      community.general.docker_network:
        name: nextcloud

    - name: Create nextcloud mysql volume
      community.general.docker_volume:
        name: nextcloud_db
    
    - name: Create nextcloud data volume
      community.general.docker_volume:
        name: nextcloud_data

    - name: Get data volume path
      community.general.docker_volume_info:
        name: nextcloud_data
      register: nextcloud_data_volume_info

    - name: Set up mysql database for nextcloud
      community.general.docker_container:
        name: nextcloud-mariadb
        image: mariadb
        command: '--transaction-isolation=READ-COMMITTED --binlog-format=ROW'
        networks:
          - name: nextcloud
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        volumes:
          - 'nextcloud_db:/var/lib/mysql'
        env:
            MYSQL_ROOT_PASSWORD: '{{ mysql_root_pass }}'
            MYSQL_PASSWORD: '{{ nc_database_pass }}'
            MYSQL_DATABASE: 'nextcloud'
            MYSQL_USER: 'nextcloud'

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Set up redis image for nextcloud
      community.general.docker_container:
        name: nextcloud-redis
        image: redis:alpine
        networks:
          - name: nextcloud
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Set up nextcloud image
      community.general.docker_container:
        name: nextcloud
        image: nextcloud
        pull: yes
        networks:
          - name: nextcloud
          - name: bridge
        networks_cli_compatible: yes
        network_mode: default
        restart_policy: 'unless-stopped'
        ports:
          - '{{ portmap.nextcloud[0] }}:80'
        volumes:
          - 'nextcloud_data:/var/www/html'
        env:
            NEXTCLOUD_TRUSTED_DOMAINS: 'nextcloud.{{ domain }}'
            REDIS_HOST: nextcloud-redis
            MYSQL_HOST: nextcloud-mariadb
            MYSQL_DATABASE: nextcloud
            MYSQL_USER: nextcloud
            MYSQL_PASSWORD: '{{ nc_database_pass }}'
            NEXTCLOUD_ADMIN_USER: '{{ nc_admin_user }}'
            NEXTCLOUD_ADMIN_PASSWORD: '{{ nc_admin_pass }}'
            OVERWRITEPROTOCOL: 'https'

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Set up cron task for nextcloud
      community.general.docker_container:
        name: nextcloud-cron
        image: nextcloud:apache
        restart_policy: 'unless-stopped'
        volumes:
          - 'nextcloud_data:/var/www/html'
        entrypoint: /cron.sh

        container_default_behavior: 'no_defaults'
        tty: no
        read_only: no
        privileged: no
        paused: no
        memory: "0"
        interactive: no
        init: no
        detach: yes
        auto_remove: no

    - name: Unset doubled headers
      lineinfile:
        path: '{{ nextcloud_data_volume_info.volume.Mountpoint }}/.htaccess'
        regexp: '{{ item }}'
        state: 'absent'
      loop:
        - '^[\t| ]*Header onsuccess unset X-Frame-Options.*$'
        - '^[\t| ]*Header always set X-Frame-Options "SAMEORIGIN".*$'
        - '^[\t| ]*Header onsuccess unset X-Content-Type-Options.*$'
        - '^[\t| ]*Header always set X-Content-Type-Options "nosniff".*$'

- name: Set up firewall
  hosts: vps
  become: true
  tags:
    - firewall
  
  roles:
    - ufw

- name: Configure unattended upgrades
  hosts: vps
  become: true
  tags:
    - unattended_upgrades
  
  roles:
    - role: jnv.unattended-upgrades
      unattended_mail: 'mikkel@mikkel.cc'
