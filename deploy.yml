---
- name: Bootstrap python 3
  hosts: vps
  become: true
  gather_facts: false
  tags:
    - bootstrap

  tasks:
  - name: install python
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python python3)

- name: Install acme.sh, aquire certs, and generate dhparams
  hosts: vps
  become: true
  tags:
    - ssl

  vars_files:
    - vars/credentials.yml
    - vars/shared_vars.yml

  vars:
    acme_sh_copy_certs_to_path: '{{ cert_dir }}'
    acme_sh_become_user: "root"

    acme_sh_default_staging: True
    acme_sh_default_force_issue: false
    acme_sh_default_dns_provider: "dns_cf"
    acme_sh_default_dns_sleep: 120
    acme_sh_default_extra_flags_issue: '-k 4096'
    acme_sh_default_install_cert_reloadcmd: "sudo systemctl reload nginx"

    acme_sh_domains:
      - domains: ["mikkel.cc", "*.mikkel.cc"]
        debug: False
    
    dhparams_remote_directory: '{{ cert_dir }}'
    dhparams_key_size: 4096

  roles:
    - { role: "nickjj.acme_sh", tags: ["acme_sh"] }
    - duckle29.dhparam

- name: Install nginx
  hosts: vps
  become: true
  tags:
    - nginx

  vars_files:
    - vars/shared_vars.yml
    - vars/nextcloud/php.yml
    - vars/nextcloud/main.yml

  pre_tasks:
    - name: Remove apache
      apt: 
        name: apache2
        state: absent

  roles:
    - nginxinc.nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded

  post_tasks:    
    - name: Make snippet directory
      file:
        dest: /etc/nginx/snippets
        state: directory
      notify:
        - reload nginx

    - name: Copy ssl snippet
      template:
        src: templates/nginx/ssl_snippets.j2
        dest: /etc/nginx/snippets/ssl
      notify:
        - reload nginx
    
    - name: Remove default nginx site
      file:
        dest: /etc/nginx/conf.d/default.conf
        state: absent
      notify:
        - reload nginx
    
    # Deploys all .conf.j2 files in templates/nginx/sites
    - name: Deploy site configs
      template:
        src: '{{ item }}'
        dest: '/etc/nginx/conf.d/{{ (item | basename | splitext)[0] }}'
      with_fileglob:
        - templates/nginx/sites/*.conf.j2
      notify:
        - reload nginx

- name: Deploy resume website
  hosts: vps
  become: true
  tags:
    - resume_site
  
  vars_files:
    - vars/shared_vars.yml
    - vars/credentials.yml

  tasks:
    - name: Clone site via git
      git:
        repo: 'https://github.com/Duckle29/startbootstrap-resume.git'
        dest: '{{ mikkelcc_webroot }}'

    - name: Install webhook server
      include_role: webhook_server
    
    - name: Change ownership of resume site files
      file:
        group: gunicorn
        owner: gunicorn
        recurse: true
        path: '{{ mikkelcc_webroot }}'
        state: directory

- name: Install thelounge
  hosts: vps
  become: true
  tags:
    - thelounge
  
  tasks:
    - name: Install nodejs
      include_role:
        name: geerlingguy.nodejs
      vars:
        nodejs_version: "11.x"
        nodejs_install_npm_user: root

    - name: Get the latest release info
      uri:
        url: https://api.github.com/repos/thelounge/thelounge/releases/latest
        return_content: true
      register: lounge_json_response
      failed_when: lounge_json_response.json.assets.0.content_type != "application/x-debian-package"

    - name: Get the latest thelounge .deb
      get_url: 
        url: '{{ lounge_json_response.json.assets.0.browser_download_url }}'
        dest: /root/
      register: lounge_deb_file
    
    - name: Install thelounge
      apt:
        deb: '{{ lounge_deb_file.dest }}'

    - name: Remove .deb file
      file:
        state: absent
        path: '{{ lounge_deb_file.dest }}'

    - name: Stop thelounge before changing config
      service:
        name: thelounge
        state: stopped

    - name: Set up config
      template:
        src: templates/thelounge-config.js.j2
        dest: /etc/thelounge/config.js

    - name: Start and enable thelounge
      service:
        enabled: yes
        name: thelounge
        state: started

- name: Install unifi SDN
  hosts: vps
  become: true
  tags:
    - unifi

  tasks:
    - name: Add an apt key for mongoDB
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: 0C49F3730359A14518585931BC711F9BA15703C6

    - name: Add an apt key for unifi
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: 06E85760C0A52C50 

    - name: Add mongoDB repository
      apt_repository:
        repo: deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse
        state: present
        filename: mongodb-org-3.4

    - name: Add unifi repository
      apt_repository:
        repo: deb http://www.ubnt.com/downloads/unifi/debian stable ubiquiti
        state: present
        filename: 100-ubnt-unifi

    - name: Install unifi SDN
      apt:
        name: unifi
        state: present

- name: Install UNMS
  hosts: vps
  become: true
  tags:
    - unms

  tasks:
    - name: Install dependencies
      apt:
        name: ['curl', 'netcat', 'sudo', 'bash']
        state: present

    - name: Check that UNMS isn't already aalaesar.install_nextcloud
      stat:
        path: /home/unms/app/unms-cli
      register: unms_stat
  
    - name: Install UNMS
      shell: "curl -fsSL https://unms.com/install > /tmp/unms_inst.sh && sudo bash /tmp/unms_inst.sh --public-https-port 443 --http-port 8081 --https-port 9443 --unattended"
      when: not unms_stat.stat.exists

- name: Install sopel
  hosts: vps
  become: true
  tags:
    - sopel

  vars_files:
    - vars/credentials.yml

  vars:
    sopel_command_prefix: '\$'
    
    sopel_instance_name: dumDuck
    sopel_nick: DumDuckBot
    sopel_auth_user: '{{ sopel_irc_user }}'
    sopel_auth_pass: '{{ sopel_irc_pass }}'

    sopel_channels: 
      - '##botspam'
      - '#reprap'
      - '#bigdelta'

    sopel_bot_owner: 'Duckle29'

    sopel_enabled_plugins:
      - help
      - admin
      - clock
      - find_updates
      - reload
      - currency
      - remind
      - search
      - version
      - xkcd
      - wolfram
      - calc
      - funreplies

    sopel_ignored_nicks:
      - kthx
      - mcrib
      - ghtx
    
    sopel_config_extra: |
      [wolfram]
      app_id = {{ wolfram_alpha_key }}
      max_public = 3
      units = metric

      [currency]
      fixer_io_key = {{ fixer_io_key }}
      auto_convert = true
  
  roles:
    - sopel.sopel

- name: Set up autotorrent
  hosts: vps
  become: true
  tags:
    - autotorrent

  vars_files:
    - vars/credentials.yml
    - vars/shared_vars.yml

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

  tasks:
    - name: Add deluge ppa
      apt_repository:
        repo: ppa:deluge-team/ppa

    - name: Install deluged
      apt:
        name: deluged
        state: present
    
    - name: Add deluge system user
      user:
        name: deluge
        password: '!'
        home: /srv/deluge
        system: yes
        state: present
    
    - name: Add deluged systemd service
      template:
        src: templates/deluge/unitfile.service.j2
        dest: /etc/systemd/system/deluged.service
      when: ansible_service_mgr == 'systemd'
      notify:
        - reload systemd
      
    - name: Start deluged to generate configs
      service:
        name: deluged
        state: started

    - name: Wait to allow deluge to generate config files
      pause:
        seconds: 5

    - name: Stop deluged
      service:
        name: deluged
        state: stopped


    - name: Add deluge admin user
      lineinfile:
        path: /srv/deluge/.config/deluge/auth
        line: '{{ deluge_user }}:{{ deluge_pass }}:10'
        create: true

    - name: Allow remote connections
      lineinfile:
        path: /srv/deluge/.config/deluge/core.conf
        regexp: '^  "allow_remote":'
        line: '  "allow_remote": true,'
  
    - name: Start and enable deluged
      service:
        name: deluged
        state: started
        enabled: yes

    - name: Ensure autoadd folder is present
      file:
        path: '/srv/deluge/torrentGen/autoadd'
        state: directory
        owner: deluge
        group: deluge

    - name: Install feedgen
      pip:
        name: feedgen
        executable: pip3
    
    - name: Install pytz
      pip:
        name: pytz
        executable: pip3

    - name: Create web root
      file:
        path: '{{ autotorrent_webroot }}'
        state: directory
        owner: deluge
        group: deluge
    
    - name: Install git
      apt:
        name: git
        state: present

    - name: Get torrentGen
      git:
        repo: https://github.com/Duckle29/torrentGen.git
        dest: /srv/deluge/torrentGen
        update: no
    
    - name: Set correct webroot in torrent gen script
      lineinfile:
        line: "webroot          = '{{ autotorrent_webroot }}/octopi/'"
        regexp: '^webroot +=.+$'
        path: /srv/deluge/torrentGen/octopi/check.py

    - name: Set up cronjob
      cron:
        name: 'autotorrent: Check for new version'
        user: 'deluge'
        hour: '*/1'
        job: /usr/bin/python3 /srv/deluge/torrentGen/octopi/check.py

- name: Install nextcloud
  hosts: vps
  become: true
  tags:
    - nextcloud

  vars_files:
    - vars/credentials.yml
    - vars/shared_vars.yml
    - vars/nextcloud/mysql.yml
    - vars/nextcloud/php.yml
    - vars/nextcloud/main.yml

  handlers:
    - name: restart php-fpm
      service:
        name: php{{ php_default_version_debian }}-fpm
        state: restarted

  pre_tasks:
  - setup:
    become: no

  tasks:
    - include_role:
        name: geerlingguy.php

    - name: Change owner of php-fpm socket
      lineinfile:
        dest: "/etc/php/{{ php_default_version_debian }}/fpm/pool.d/www.conf"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - regexp: '^listen\.owner.?=.+$'
          line: "listen.owner = {{ php_fpm_pool_user }}"
        - regexp: '^listen\.group.?=.+$'
          line: "listen.group = {{ php_fpm_pool_group }}"
      when: php_enable_php_fpm
      notify:
        - restart php-fpm

    - include_role:
        name: geerlingguy.mysql
    - include_role:
        name: aalaesar.install_nextcloud

- name: Set up firewall
  hosts: vps
  become: true
  tags:
    - firewall
  
  roles:
    - ufw